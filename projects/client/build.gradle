buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.apache.commons:commons-compress:1.22'
    }
}

plugins {
    id 'java-library'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'nebula.deb' version '9.1.1'
}

import org.apache.tools.ant.filters.ReplaceTokens
import java.nio.file.Files
import java.nio.file.Paths
import org.apache.commons.compress.compressors.gzip.GzipParameters
import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream

sourceCompatibility = 1.8
targetCompatibility = 1.8

description "Command line database client for miniconnect"

def deploymentName = 'miniconnect-client'
def executableName = 'micl'
def longExecutableName = deploymentName
def maintainerName = 'Dávid Horváth'
def maintainerEmail = 'horvath@webarticum.hu'
def websiteUrl = 'https://github.com/miniconnect/miniconnect-client'
def mainClassName = 'hu.webarticum.miniconnect.client.client.ClientMain'
def longDescription = """Connects to the specified server via miniconnect protocol.
It's basically a SQL REPL that you can use to run queries.
It displays result sets and error responses in a friendly manner."""

dependencies {
    implementation project(':repl')
    implementation "hu.webarticum.miniconnect.api:api:${miniConnectApiVersion}"
    implementation "hu.webarticum.miniconnect:impl:${miniConnectVersion}"
    implementation "hu.webarticum.miniconnect:record:${miniConnectVersion}"
    implementation "hu.webarticum.miniconnect:messenger:${miniConnectVersion}"
    implementation "hu.webarticum.miniconnect:server:${miniConnectVersion}"
    implementation 'hu.webarticum:regexbee:0.4.0'
    implementation 'info.picocli:picocli:4.6.3'
    
    runtimeOnly 'org.slf4j:slf4j-nop:1.7.36'
}

application {
    mainClass = mainClassName
}

run {
    standardInput = System.in
}


def compressWithGzip9(String source, String target) throws IOException {
    GzipParameters parameters = new GzipParameters();
    parameters.setCompressionLevel(9);
    try (OutputStream out = new GzipCompressorOutputStream(Files.newOutputStream(Paths.get(target)), parameters)) {
        Files.copy(Paths.get(source), out);
    }
}
    

task buildDeb(type: Deb, dependsOn: ['jar']) {
    File jarFile = jar.archiveFile.getAsFile().get();
    String jarFileName = jarFile.getName()
    
    doFirst {
        mkdir 'build/deb-prepare'
        
        // TODO: generate from picocli
        compressWithGzip9(
            file('packaging/deb/manpage').absolutePath,
            file('build/deb-prepare/manpage.gz').absolutePath,
        )
        
        // TODO: generate from a unified changelog file
        compressWithGzip9(
            file('packaging/deb/changelog').absolutePath,
            file('build/deb-prepare/changelog.Debian.gz').absolutePath,
        )
        
        copy {
            from (file('packaging/deb/copyright'))
            into 'build/deb-prepare'
            filteringCharset = 'UTF-8'
            filter(ReplaceTokens, tokens: [
                'CURRENT_YEAR': new Date().format('yyyy').toString(),
            ])
        }
        
        copy {
            from (file('packaging/deb/start.sh'))
            into 'build/deb-prepare'
            filteringCharset = 'UTF-8'
            filter(ReplaceTokens, tokens: [
                'JAVA_ROOT': "/usr/share/${deploymentName}".toString(),
                'JAR_FILENAME': jarFileName.toString(),
                'MAIN_CLASS': mainClassName.toString(),
            ])
        }
    }
    
    dirMode 0755
    fileMode 0644
    user "root"
    permissionGroup "root"
    
    packageName = deploymentName
    version = project.version
    release = null
    maintainer = maintainerName + ' <' + maintainerEmail + '>'
    url = websiteUrl
    summary = project.description
    packageDescription = longDescription
    
    
    // TODO: that dependency should be set?
    requires('default-jre').or('java8-runtime').or('java9-runtime')
    requires('jarwrapper')
    
    from (jarFile) {
        into "/usr/share/${deploymentName}"
    }
    
    from (file('build/deb-prepare/copyright')) {
        into "/usr/share/doc/${deploymentName}"
    }
    
    from (file('build/deb-prepare/start.sh')) {
        into '/usr/bin'
        rename(/.*/, executableName)
        fileMode 0755
    }
    
    from (file('build/deb-prepare/manpage.gz')) {
        into '/usr/share/man/man1'
        rename(/.*/, "${deploymentName}.1.gz")
    }
    
    from (file('build/deb-prepare/changelog.Debian.gz')) {
        into "/usr/share/doc/${deploymentName}"
    }
    
    link("/usr/bin/${longExecutableName}", executableName)
    link("/usr/share/man/man1/${executableName}.1.gz", "${deploymentName}.1.gz")
    
    from (configurations.default.files) {
        into "/usr/share/${deploymentName}/lib"
    }
}
